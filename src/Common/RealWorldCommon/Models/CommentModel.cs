// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace RealWorldCommon.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    public partial class CommentModel
    {
        /// <summary>
        /// Initializes a new instance of the Comment class.
        /// </summary>
        public CommentModel()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Comment class.
        /// </summary>
        public CommentModel(int id, System.DateTime createdAt, System.DateTime updatedAt, string body, ProfileModel author)
        {
            Id = id;
            CreatedAt = createdAt;
            UpdatedAt = updatedAt;
            Body = body;
            Author = author;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public int Id { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "createdAt")]
        public System.DateTime CreatedAt { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "updatedAt")]
        public System.DateTime UpdatedAt { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "body")]
        public string Body { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "author")]
        public ProfileModel Author { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Body == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Body");
            }
            if (Author == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Author");
            }
            if (Author != null)
            {
                Author.Validate();
            }
        }
    }
}
