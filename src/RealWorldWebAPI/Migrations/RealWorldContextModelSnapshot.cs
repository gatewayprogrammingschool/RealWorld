// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RealWorldWebAPI.Data.Models;

namespace RealWorldWebAPI.Migrations
{
    [DbContext(typeof(RealWorldContext))]
    partial class RealWorldContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.2");

            modelBuilder.Entity("RealWorldWebAPI.Data.Models.Article", b =>
                {
                    b.Property<Guid>("ArticleUid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ArticleUid")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AuthorUserUid")
                        .HasColumnName("AuthorUserUid")
                        .HasColumnType("TEXT");

                    b.Property<string>("Body")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("ArticleUid");

                    b.HasIndex("AuthorUserUid");

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("RealWorldWebAPI.Data.Models.ArticleFavorite", b =>
                {
                    b.Property<Guid>("ArticleFavoriteUid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ArticleFavoriteUid")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ArticleUid")
                        .HasColumnName("ArticleUid")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserUid")
                        .HasColumnName("UserUid")
                        .HasColumnType("TEXT");

                    b.HasKey("ArticleFavoriteUid");

                    b.HasIndex("ArticleUid");

                    b.HasIndex("UserUid");

                    b.ToTable("Favorites");
                });

            modelBuilder.Entity("RealWorldWebAPI.Data.Models.ArticleTag", b =>
                {
                    b.Property<Guid>("ArticleTagUid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ArticleTagUid")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ArticleUid")
                        .HasColumnName("ArticleUid")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TagUid")
                        .HasColumnName("TagUid")
                        .HasColumnType("TEXT");

                    b.HasKey("ArticleTagUid");

                    b.HasIndex("ArticleUid");

                    b.HasIndex("TagUid");

                    b.ToTable("ArticleTag");
                });

            modelBuilder.Entity("RealWorldWebAPI.Data.Models.Comment", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("ArticleUid")
                        .HasColumnName("ArticleUid")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AuthorUserUid")
                        .HasColumnName("AuthorUserUid")
                        .HasColumnType("TEXT");

                    b.Property<string>("Body")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ArticleUid");

                    b.HasIndex("AuthorUserUid");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("RealWorldWebAPI.Data.Models.FavoriteAuthor", b =>
                {
                    b.Property<Guid>("FavoriteAuthorUid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("FavoriteAuthorUid")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AuthorUserUid")
                        .HasColumnName("AuthorUserUid")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("FanUserUid")
                        .HasColumnName("FanUserUid")
                        .HasColumnType("TEXT");

                    b.HasKey("FavoriteAuthorUid");

                    b.HasIndex("AuthorUserUid");

                    b.HasIndex("FanUserUid");

                    b.ToTable("FavoriteAuthor");
                });

            modelBuilder.Entity("RealWorldWebAPI.Data.Models.Tags", b =>
                {
                    b.Property<Guid>("TagUid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TagUid")
                        .HasColumnType("TEXT");

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("TagUid");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("RealWorldWebAPI.Data.Models.User", b =>
                {
                    b.Property<Guid>("UserUid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UserUid")
                        .HasColumnType("TEXT");

                    b.Property<string>("Bio")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Image")
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("UserUid");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("RealWorldWebAPI.Data.Models.Article", b =>
                {
                    b.HasOne("RealWorldWebAPI.Data.Models.User", "Author")
                        .WithMany("Articles")
                        .HasForeignKey("AuthorUserUid")
                        .IsRequired();
                });

            modelBuilder.Entity("RealWorldWebAPI.Data.Models.ArticleFavorite", b =>
                {
                    b.HasOne("RealWorldWebAPI.Data.Models.Article", "Article")
                        .WithMany("Favorites")
                        .HasForeignKey("ArticleUid")
                        .IsRequired();

                    b.HasOne("RealWorldWebAPI.Data.Models.User", "User")
                        .WithMany("Favorites")
                        .HasForeignKey("UserUid")
                        .IsRequired();
                });

            modelBuilder.Entity("RealWorldWebAPI.Data.Models.ArticleTag", b =>
                {
                    b.HasOne("RealWorldWebAPI.Data.Models.Article", "Article")
                        .WithMany("ArticleTags")
                        .HasForeignKey("ArticleUid")
                        .IsRequired();

                    b.HasOne("RealWorldWebAPI.Data.Models.Tag", "Tag")
                        .WithMany("ArticleTag")
                        .HasForeignKey("TagUid")
                        .IsRequired();
                });

            modelBuilder.Entity("RealWorldWebAPI.Data.Models.Comment", b =>
                {
                    b.HasOne("RealWorldWebAPI.Data.Models.Article", "Article")
                        .WithMany("Comments")
                        .HasForeignKey("ArticleUid")
                        .IsRequired();

                    b.HasOne("RealWorldWebAPI.Data.Models.User", "AuthorUser")
                        .WithMany("Comments")
                        .HasForeignKey("AuthorUserUid")
                        .IsRequired();
                });

            modelBuilder.Entity("RealWorldWebAPI.Data.Models.FavoriteAuthor", b =>
                {
                    b.HasOne("RealWorldWebAPI.Data.Models.User", "AuthorUser")
                        .WithMany("FavoriteAuthorAuthorUserU")
                        .HasForeignKey("AuthorUserUid")
                        .IsRequired();

                    b.HasOne("RealWorldWebAPI.Data.Models.User", "FanUser")
                        .WithMany("FavoriteAuthorFanUserU")
                        .HasForeignKey("FanUserUid")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
